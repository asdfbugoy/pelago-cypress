{"version":3,"sources":["components/movie/Header.js","components/movie/Search.js","components/movie/List.js","components/movie/index.js","AppStyled.js","App.js","serviceWorker.js","index.js"],"names":["StyledHeader","styled","header","Header","data-cy","className","Search","props","onChange","debounce","fetchAPI","ref","current","value","React","useRef","data-fetch","disabled","loading","onClick","StyledImg","div","url","List","Error","map","d","i","key","Poster","Title","imdbID","Year","Type","Movie","useState","totalResults","Response","data","setData","setLoading","useEffect","s","params","apikey","query","Object","keys","k","encodeURIComponent","join","fetch","then","response","json","console","log","parseInt","catch","error","message","AppStyled","createGlobalStyle","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d25aa598.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledHeader = styled.header`\n    font-size: 18px;\n`;\n\nconst Header = () => {\n    return <StyledHeader data-cy=\"header\" className=\"mb-3\">\n        <div className=\"primary\">Hey</div>\n        <div className=\"secondary\">Cinema</div>\n    </StyledHeader>;\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\n\nconst Search = props => {\n    const onChange = debounce(() => props.fetchAPI(ref.current.value), 2000);\n\n    const onClick = () => props.fetchAPI(ref.current.value);\n\n    const ref = React.useRef();\n\n    return <div data-cy=\"search\">\n        <div className=\"input-group mb-3\">\n            <input ref={ref} data-cy=\"input\" onChange={onChange} className=\"form-control\" data-fetch=\"false\" />\n            <div className=\"input-group-append\">\n                <button data-cy=\"btn\" disabled={props.loading} className=\"btn btn-primary\" onClick={onClick}><i className={props.loading ? 'fa fa-gear fa-spin fa-spiner' : 'fa fa-search'}></i></button>\n            </div>\n        </div>\n    </div>;\n};\n\nSearch.propTypes = {\n    fetchAPI: PropTypes.func,\n    data: PropTypes.object,\n    loading: PropTypes.bool\n};\n\nexport default Search;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledImg = styled.div`\n    width: 100%;\n    height: 150px;\n    background-image: url(${props => props.url !== 'N/A' ? props.url : 'https://via.placeholder.com/150'});\n    background-position: center center;\n    background-size: cover;\n    @media (min-width: 576px) {\n        width: 150px;\n    }\n`;\n\nconst List = props => {\n    const { Search, Error } = props;\n\n    return Error ?\n        <div data-cy=\"error\">{Error}</div>\n        : <div className=\"row\" data-cy=\"list\">\n            {Search.map((d, i) => <div key={i} className=\"col-md-6 mb-3\">\n                <div className=\"card border shadow\">\n                    <div className=\"row no-gutters\">\n                        <div className=\"col-sm-auto\">\n                            {/* <img className=\"card-img\" src=\"https://via.placeholder.com/150\" alt=\"\" /> */}\n                            <StyledImg url={d.Poster} className=\"card-img\" />\n                        </div>\n                        <div className=\"col-sm\">\n                            <div className=\"card-body\">\n                                <div className=\"card-title primary\">{d.Title}</div>\n                                <div className=\"card-text secondary\">{d.imdbID}</div>\n                                <div className=\"card-text\">{d.Year}</div>\n                                <div className=\"card-text\">{d.Type}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>)}\n        </div>;\n};\n\nList.propTypes = {\n    Search: PropTypes.array,\n    totalResults: PropTypes.number,\n    Response: PropTypes.bool,\n    Error: PropTypes.string\n};\n\nexport default List;","import React from 'react';\nimport Header from './Header';\nimport Search from './Search';\nimport List from './List';\n\nconst Movie = () => {\n\n    // const [list, setList] = React.useState([]);\n    // const [total, setTotal] = React.useState(0);\n    // const [status, setStatus] = React.useState(false);\n\n    const [data, setData] = React.useState({\n        Search: [],\n        totalResults: 0,\n        Response: false\n    });\n\n    const [loading, setLoading] = React.useState(false);\n\n    React.useEffect(() => {\n        // fetchAPI('default');\n    }, []);\n\n    const fetchAPI = (s) => {\n        setLoading(true);\n        const apikey = '185c5ebb';\n        const url = 'https://www.omdbapi.com/?';\n        const params = {\n            apikey: apikey,\n            s: s\n        };\n        const query = Object.keys(params)\n            .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\n            .join('&');\n\n        fetch(url + query, {\n            // method: 'POST', // or 'PUT'\n            // headers: {\n            //     'Content-Type': 'application/json',\n            // },\n            // body: JSON.stringify(params),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log('Success:', data);\n                // setList(data.Search);\n                // setTotal(data.totalResults);\n                // setStatus(data.Response);\n                data.totalResults = data.totalResults ? parseInt(data.totalResults, 10) : 0;\n                data.Response = data.Response === 'True' ? true : false;\n\n                setData(data.Response ? data : {\n                    Response: false,\n                    totalResults: 0,\n                    Search: [],\n                    Error: data.Error\n                });\n                setLoading(false)\n                // setTimeout(() => setLoading(false), 2000);\n            })\n            .catch((error) => {\n                console.log('Error:', error);\n                setData({\n                    Response: false,\n                    totalResults: 0,\n                    Search: [],\n                    Error: error.message\n                });\n            });\n    };\n\n    return <section data-cy=\"movie\">\n        <Header />\n        <Search loading={loading} fetchAPI={fetchAPI} />\n        <List {...data} />\n    </section>;\n};\n\nexport default Movie;","import { createGlobalStyle } from 'styled-components';\n\nconst AppStyled = createGlobalStyle`\n    /* @import 'https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css';\n    @import 'https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css'; */\n\n    body {\n        font-family: 'Helvetica Neue';\n        font-size: 16px;\n        color: #34283f;\n    }\n    \n    .primary {\n        color: #7faae4;\n    }\n    .secondary {\n        color: #834db7;\n    }\n    .tertiary {\n        color: #34283f;\n    }\n`;\n\nexport default AppStyled;\n","import React from 'react';\nimport Movie from 'components/movie';\nimport AppStyled from 'AppStyled';\n\nconst App = () => <React.Fragment>\n    <AppStyled />\n    <article className=\"App container py-3\" data-cy=\"app\">\n        <Movie />\n    </article>\n</React.Fragment>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}